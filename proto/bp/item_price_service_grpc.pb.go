// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemPriceServiceClient is the client API for ItemPriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemPriceServiceClient interface {
	GetItemInfoList(ctx context.Context, in *ItemInfoRequest, opts ...grpc.CallOption) (*ItemInfoResponse, error)
	GetItemPriceHistoryByItem(ctx context.Context, in *ItemPriceRequest, opts ...grpc.CallOption) (*ItemPriceResponse, error)
	AddItem(ctx context.Context, in *ItemOpRequest, opts ...grpc.CallOption) (*AddItemResponse, error)
	DeleteItem(ctx context.Context, in *ItemOpRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
}

type itemPriceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemPriceServiceClient(cc grpc.ClientConnInterface) ItemPriceServiceClient {
	return &itemPriceServiceClient{cc}
}

func (c *itemPriceServiceClient) GetItemInfoList(ctx context.Context, in *ItemInfoRequest, opts ...grpc.CallOption) (*ItemInfoResponse, error) {
	out := new(ItemInfoResponse)
	err := c.cc.Invoke(ctx, "/item.price.trace.ItemPriceService/GetItemInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemPriceServiceClient) GetItemPriceHistoryByItem(ctx context.Context, in *ItemPriceRequest, opts ...grpc.CallOption) (*ItemPriceResponse, error) {
	out := new(ItemPriceResponse)
	err := c.cc.Invoke(ctx, "/item.price.trace.ItemPriceService/GetItemPriceHistoryByItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemPriceServiceClient) AddItem(ctx context.Context, in *ItemOpRequest, opts ...grpc.CallOption) (*AddItemResponse, error) {
	out := new(AddItemResponse)
	err := c.cc.Invoke(ctx, "/item.price.trace.ItemPriceService/AddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemPriceServiceClient) DeleteItem(ctx context.Context, in *ItemOpRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, "/item.price.trace.ItemPriceService/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemPriceServiceServer is the server API for ItemPriceService service.
// All implementations must embed UnimplementedItemPriceServiceServer
// for forward compatibility
type ItemPriceServiceServer interface {
	GetItemInfoList(context.Context, *ItemInfoRequest) (*ItemInfoResponse, error)
	GetItemPriceHistoryByItem(context.Context, *ItemPriceRequest) (*ItemPriceResponse, error)
	AddItem(context.Context, *ItemOpRequest) (*AddItemResponse, error)
	DeleteItem(context.Context, *ItemOpRequest) (*DeleteItemResponse, error)
	mustEmbedUnimplementedItemPriceServiceServer()
}

// UnimplementedItemPriceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemPriceServiceServer struct {
}

func (UnimplementedItemPriceServiceServer) GetItemInfoList(context.Context, *ItemInfoRequest) (*ItemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemInfoList not implemented")
}
func (UnimplementedItemPriceServiceServer) GetItemPriceHistoryByItem(context.Context, *ItemPriceRequest) (*ItemPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemPriceHistoryByItem not implemented")
}
func (UnimplementedItemPriceServiceServer) AddItem(context.Context, *ItemOpRequest) (*AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedItemPriceServiceServer) DeleteItem(context.Context, *ItemOpRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedItemPriceServiceServer) mustEmbedUnimplementedItemPriceServiceServer() {}

// UnsafeItemPriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemPriceServiceServer will
// result in compilation errors.
type UnsafeItemPriceServiceServer interface {
	mustEmbedUnimplementedItemPriceServiceServer()
}

func RegisterItemPriceServiceServer(s grpc.ServiceRegistrar, srv ItemPriceServiceServer) {
	s.RegisterService(&ItemPriceService_ServiceDesc, srv)
}

func _ItemPriceService_GetItemInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemPriceServiceServer).GetItemInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.price.trace.ItemPriceService/GetItemInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemPriceServiceServer).GetItemInfoList(ctx, req.(*ItemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemPriceService_GetItemPriceHistoryByItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemPriceServiceServer).GetItemPriceHistoryByItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.price.trace.ItemPriceService/GetItemPriceHistoryByItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemPriceServiceServer).GetItemPriceHistoryByItem(ctx, req.(*ItemPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemPriceService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemPriceServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.price.trace.ItemPriceService/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemPriceServiceServer).AddItem(ctx, req.(*ItemOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemPriceService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemOpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemPriceServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item.price.trace.ItemPriceService/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemPriceServiceServer).DeleteItem(ctx, req.(*ItemOpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemPriceService_ServiceDesc is the grpc.ServiceDesc for ItemPriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemPriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "item.price.trace.ItemPriceService",
	HandlerType: (*ItemPriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItemInfoList",
			Handler:    _ItemPriceService_GetItemInfoList_Handler,
		},
		{
			MethodName: "GetItemPriceHistoryByItem",
			Handler:    _ItemPriceService_GetItemPriceHistoryByItem_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _ItemPriceService_AddItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ItemPriceService_DeleteItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item_price_service.proto",
}
